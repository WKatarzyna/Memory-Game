{"version":3,"sources":["components/navigation/Navigation.js","components/main/card/card.js","components/main/board/board.js","components/main/layer/layer.js","components/main/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","Component","Card","_ref","handleClick","flipped","solved","id","type","disabled","concat","onClick","alt","src","Board","cards","turn","map","card","card_card","Object","assign","key","includes","setLayer","array","_array","slice","i","length","j","Math","floor","random","temp","shuffle","reduce","acc","push","apply","Footer","props","App","_useState","useState","_useState2","slicedToArray","setFlipped","_useState3","_useState4","setTurn","_useState5","_useState6","setSolved","_useState7","_useState8","setCards","useEffect","resetCards","navigation_Navigation","lenght","console","log","resetButton","board","toConsumableArray","sameCardClickedTwice","clickedCard","find","flippedCard","isAMatch","setTimeout","footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6980486f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Navigation  extends Component {\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"navigation\">\r\n              <div className=\"navContent\">\r\n              <h1 className=\"header-main\">Memory Game</h1>\r\n              <h2>Font Awesome find out your Icon Pack</h2></div>\r\n              \r\n            </div>)\r\n    }\r\n    \r\n    }\r\n\r\nexport default Navigation;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\n function Card({\r\n  handleClick,\r\n  flipped,\r\n  solved,\r\n  id,\r\n  type,\r\n  disabled,\r\n}) {\r\n  return (\r\n    <div\r\n      className={`flip-container ${flipped ? 'flipped' : ''}`}\r\n\r\n      onClick={() => (disabled ? null : handleClick(id))}\r\n    >\r\n      <div className='flipper'>\r\n        <img\r\n          alt='card'\r\n          className={flipped ? 'front' : 'back'}\r\n          src={flipped || solved ? `/img/${type}.png` : '/img/back.png'}\r\n    \r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCard.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  flipped: PropTypes.bool.isRequired,\r\n  solved: PropTypes.bool.isRequired,\r\n  handleClick: PropTypes.func.isRequired,\r\n  \r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Card from '../card/card';\r\n\r\nfunction Board({\r\n  cards,\r\n  flipped,\r\n  solved,\r\n  handleClick,\r\n  turn,\r\n}) {\r\n  return (\r\n    <div className='board'>\r\n      {cards.map((card) => (\r\n        <Card\r\n          key={card.id}\r\n          handleClick={handleClick}\r\n          flipped={flipped.includes(card.id)}\r\n          solved={solved.includes(card.id)}\r\n          turn={turn || solved.includes(card.id)}\r\n          {...card}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nBoard.propTypes = {\r\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n  solved: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n  handleClick: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default Board;","function shuffle(array) {\r\n  const _array = array.slice(0)\r\n  for (var i = _array.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1))\r\n    var temp = _array[i]\r\n    _array[i] = _array[j]\r\n    _array[j] = temp\r\n  }\r\n\r\n  return _array\r\n}\r\n\r\n function setLayer() {\r\n  let id = 0\r\n  const cards = ['1', '2', '3', '4','5','6'\r\n  ].reduce((acc, type) => {\r\n    acc.push(...[{\r\n      id: id++,\r\n      type\r\n    }, {\r\n      id: id++,\r\n      type\r\n    }])\r\n    return acc\r\n  }, [])\r\n\r\n  return shuffle(cards)\r\n}\r\n\r\nexport default setLayer;","import React from \"react\";\r\n\r\n\r\n\r\n// set the footer to a copyright string\r\nconst Footer = props => (\r\n  <div className=\"footer\">\r\n    <span><p className=\"footer-text\">@All Rights Reserved</p><img\r\n          alt='logo'\r\n          className='logo'\r\n          src={'/img/logo.png'}\r\n    \r\n        /></span>\r\n  </div>\r\n);\r\n\r\nexport default Footer;","\nimport React, { useState, useEffect } from 'react'\nimport Navigation from './components/navigation/Navigation';\nimport Board from './components/main/board/board';\nimport setLayer from './components/main/layer/layer';\nimport Footer from './components/main/footer/footer'\n\nfunction App() {\n\n  \n  let [flipped, setFlipped] = useState([])// śledzenie id karty\n  let[turn, setTurn]= useState(false)//odwracanie kart do 2 \n  let [solved, setSolved] = useState([])// śledzenie id karty\n  let [cards, setCards] = useState([])\n  useEffect(() => {\n    setCards(setLayer())\n  }, [])\n  let sameCardClickedTwice = (id) => flipped.includes(id)\n\n  let isAMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id)\n    console.log(clickedCard);\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\n    console.log(flippedCard);\n    \n    return flippedCard.type === clickedCard.type\n    \n  }\n\n  let resetButton = () => {\n    setFlipped([])\n    setTurn(false)\n    for(let i =0; i < cards.lenght;i++){\n      console.log(cards[i]);\n    }\n  }\n  const resetCards = () => {\n    setFlipped([])\n    setTurn(false)\n  }\n\n  const handleClick = (id) => {\n    setTurn(true)\n    if (flipped.length === 0) {\n      \n      setFlipped((flipped) => [...flipped, id])\n      setTurn(false)\n    } else {\n      if (sameCardClickedTwice(flipped, id)) return\n      setFlipped((flipped) => [...flipped, id])\n      if (isAMatch(id)) {\n        setSolved([...solved, ...flipped, id])\n        resetCards()\n      } else {\n        setTimeout(resetCards, 600)\n      }\n    }\n  }\n\n  return (\n    <div className=\"container\">\n    <nav>\n      <Navigation/>\n      <button \n       className=\"reset\"\n       onClick={(\n       ) => ( resetButton(\n        // śledzenie id karty\n         setFlipped([]),\n         setTurn(false),\n        \n       ))} >Reset Game</button>\n      </nav>\n      <main>\n       \n        <div className=\"board-content\">\n        <Board\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        solved={solved}\n        turn={turn}/>\n        </div>\n        \n       </main>\n       <Footer />\n     </div>);\n}\n\nexport default App;\n\n \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}